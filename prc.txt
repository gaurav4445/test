1.W.A. Program for Create 5 nodes and display Linked List for Single Linked List. 

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node for a singly linked list
struct Node {
    int data;
    struct Node *next;
};

// Function to display the singly linked list
void displayList(struct Node *node) {
    printf("Linked List: ");
    while (node != NULL) {
        printf("%d -> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

int main() {
    // Initializing five nodes for a singly linked list
    struct Node *head = NULL;
    struct Node *second = NULL;
    struct Node *third = NULL;
    struct Node *fourth = NULL;
    struct Node *fifth = NULL;

    // Allocate memory for nodes
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));
    fifth = (struct Node *)malloc(sizeof(struct Node));

    // Assign data to nodes and link them
    head->data = 1;
    head->next = second;

    second->data = 2;
    second->next = third;

    third->data = 3;
    third->next = fourth;

    fourth->data = 4;
    fourth->next = fifth;

    fifth->data = 5;
    fifth->next = NULL;

    // Display the singly linked list
    displayList(head);

    // Free allocated memory
    free(head);
    free(second);
    free(third);
    free(fourth);
    free(fifth);

    return 0;
}



2.W.A. Program for Create 10 nodes and display Linked List for Circular Linked List.

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void displayList(struct Node *start) {
    printf("Circular Linked List: ");
    if (start == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node *temp = start;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != start);

    printf("(Back to Start)\n");
}

int main() {
    struct Node *head = NULL, *current = NULL;

    for (int i = 1; i <= 10; ++i) {
        struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
        newNode->data = i;
        newNode->next = (head == NULL) ? newNode : head;

        if (head == NULL) {
            head = newNode;
        } else {
            current->next = newNode;
        }
        current = newNode;
    }

    displayList(head);

    // Free allocated memory (deallocation can be added if necessary)

    return 0;
}




3- W.A. Program for Create 5 nodes and display Linked List for double Linked List


#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node for a doubly linked list
struct Node {
    int data;
    struct Node *prev;
    struct Node *next;
};

// Function to display the doubly linked list
void displayList(struct Node *node) {
    printf("Double Linked List: ");
    while (node != NULL) {
        printf("%d <-> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

int main() {
    // Initializing five nodes for a doubly linked list
    struct Node *head = NULL;
    struct Node *second = NULL;
    struct Node *third = NULL;
    struct Node *fourth = NULL;
    struct Node *fifth = NULL;

    // Allocate memory for nodes
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));
    fifth = (struct Node *)malloc(sizeof(struct Node));

    // Assign data to nodes and link them forward
    head->data = 1;
    head->prev = NULL;
    head->next = second;

    second->data = 2;
    second->prev = head;
    second->next = third;

    third->data = 3;
    third->prev = second;
    third->next = fourth;

    fourth->data = 4;
    fourth->prev = third;
    fourth->next = fifth;

    fifth->data = 5;
    fifth->prev = fourth;
    fifth->next = NULL;

    // Display the doubly linked list
    displayList(head);

    // Free allocated memory
    free(head);
    free(second);
    free(third);
    free(fourth);
    free(fifth);

    return 0;
}




4W.A. Program for Push 4 elements and display stack by using Linked List

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

struct Stack {
    struct Node *top;
};

void push(struct Stack *stack, int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = stack->top;
    stack->top = newNode;
}

void displayStack(struct Stack *stack) {
    struct Node *temp = stack->top;
    printf("Stack elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Stack stack = { .top = NULL };

    for (int i = 10; i <= 40; i += 10) {
        push(&stack, i);
    }

    displayStack(&stack);

    return 0;
}



5 W.A. Program for make a queue of 10 elements and display Queue by using Linked List


#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

struct Queue {
    struct Node *front, *rear;
};

void enqueue(struct Queue *queue, int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (queue->rear == NULL) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}

void displayQueue(struct Queue *queue) {
    if (queue->front == NULL) {
        printf("Queue is empty.\n");
        return;
    }

    struct Node *temp = queue->front;
    printf("Queue elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Queue queue = { .front = NULL, .rear = NULL };

    for (int i = 1; i <= 10; ++i) {
        enqueue(&queue, i * 10);
    }

    displayQueue(&queue);

    return 0;
}


6W.A. Program for Create 5 nodes and display Linked List for double Linked List in sorted order
while creating a list duplicate should be allowed.


#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *prev, *next;
};

void displayList(struct Node *node) {
    printf("Double Linked List: ");
    while (node != NULL) {
        printf("%d <-> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

struct Node *createNode(int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = newNode->next = NULL;
    return newNode;
}

void insertSorted(struct Node **headRef, struct Node *newNode) {
    struct Node *current = *headRef;
    while (current && current->data < newNode->data) {
        current = current->next;
    }

    if (!*headRef || current == *headRef) {
        newNode->next = *headRef;
        if (*headRef) {
            (*headRef)->prev = newNode;
        }
        *headRef = newNode;
    } else {
        newNode->next = current;
        newNode->prev = current->prev;
        current->prev->next = newNode;
        current->prev = newNode;
    }
}

int main() {
    struct Node *head = NULL;

    insertSorted(&head, createNode(5));
    insertSorted(&head, createNode(3));
    insertSorted(&head, createNode(7));
    insertSorted(&head, createNode(3));
    insertSorted(&head, createNode(6));

    displayList(head);

    // Free allocated memory
    // Add deallocation if needed

    return 0;
}



